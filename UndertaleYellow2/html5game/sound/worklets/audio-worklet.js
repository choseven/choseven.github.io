AudioWorkletProcessor.prototype._i1=function(){this._j1=true;this.port.onmessage=(_k1)=>{if(_k1.data==="kill")this._j1=false;};};class _l1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._i1();}process(_m1,_n1,parameters){const input=_m1[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _o1=input[c];for(let _p1=0;_p1<_o1.length;++_p1){const _q1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];
_n1[_q1][c][_p1]=_o1[_p1];}}return this._j1;}}class _r1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._i1();}process(_m1,_n1,parameters){const _s1=_m1[0];const _t1=_m1[1];const output=_n1[0];const gain=parameters.gain;for(let c=0;c<_t1.length;++c){const _o1=_t1[c];const _u1=output[c];for(let _p1=0;_p1<_o1.length;++_p1)_u1[_p1]=_o1[_p1];}for(let c=0;c<_s1.length;++c){const _o1=_s1[c];const _u1=output[c];
for(let _p1=0;_p1<_o1.length;++_p1){const _v1=(gain[_p1]!==undefined)?gain[_p1]:gain[0];_u1[_p1]+=_o1[_p1]*_v1;}}return this._j1;}}registerProcessor("audio-bus-input",_l1);registerProcessor("audio-bus-output",_r1);class _w1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _x1=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_y1){super();this._i1();const _z1=_y1.outputChannelCount[0];this._A1=new Float32Array(_z1);this._B1=new Uint32Array(_z1);}process(_m1,_n1,parameters){const input=_m1[0];const output=_n1[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _o1=input[c];const _u1=output[c];for(let _p1=0;_p1<_o1.length;++_p1){_u1[_p1]=_o1[_p1];if(this._B1[c]===0)this._A1[c]=_o1[_p1];const _C1=(factor[_p1]!==undefined)?factor[_p1]:factor[0];++this._B1[c];this._B1[c]%=_C1;const _q1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];if(_q1>0.0){continue;}let _D1=this._A1[c];const _v1=(gain[_p1]!==undefined)?gain[_p1]:gain[0];_D1*=_v1;_D1=Math.max(Math.min(_D1,
1.0),-1.0);const _E1=(resolution[_p1]!==undefined)?resolution[_p1]:resolution[0];const max=(_D1>0.0)?_w1._x1[_E1]-1:_w1._x1[_E1];_D1=Math.round(_D1*max)/max;const _F1=(mix[_p1]!==undefined)?mix[_p1]:mix[0];_u1[_p1]*=(1.0-_F1);_u1[_p1]+=(_D1*_F1);}}return this._j1;}}registerProcessor("bitcrusher-processor",_w1);class _G1 extends AudioWorkletProcessor{static _H1=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",
defaultValue:0.2,minValue:0.0,maxValue:_G1._H1},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_y1){super();this._i1();const _z1=_y1.outputChannelCount[0];const _I1=(_G1._H1*sampleRate)+1;this.buffer=new Array(_z1);this._J1=new Uint32Array(_z1);for(let c=0;c<_z1;++c)this.buffer[c]=new Float32Array(_I1);}process(_m1,_n1,parameters){const input=_m1[0];const output=_n1[0];const bypass=parameters.bypass;
const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _o1=input[c];const _u1=output[c];for(let _p1=0;_p1<_o1.length;++_p1){_u1[_p1]=_o1[_p1];const _K1=(time[_p1]!==undefined)?time[_p1]:time[0];const _L1=this._M1(c,_K1);const _C1=(feedback[_p1]!==undefined)?feedback[_p1]:feedback[0];const _N1=_o1[_p1]+(_L1*_C1);this.write(c,_N1);const _q1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];if(_q1>0.0){continue;}const _F1=(mix[_p1]!==undefined)?mix[_p1]:mix[0];
_u1[_p1]*=(1-_F1);_u1[_p1]+=(_L1*_F1);}}return this._j1;}_M1(_O1,_P1){const _Q1=_P1*sampleRate;let _R1=(this._J1[_O1]-~~_Q1);let _S1=(_R1-1);while(_R1<0)_R1+=this.buffer[_O1].length;while(_S1<0)_S1+=this.buffer[_O1].length;const frac=_Q1-~~_Q1;const _T1=this.buffer[_O1][_R1];const _U1=this.buffer[_O1][_S1];return _T1+(_U1-_T1)*frac;}write(_O1,_V1){++this._J1[_O1];this._J1[_O1]%=this.buffer[_O1].length;this.buffer[_O1][this._J1[_O1]]=_V1;}}registerProcessor("delay-processor",_G1);class _W1 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [];}constructor(){super();this._i1();}process(_X1,_Y1,_Z1){const input=_X1[0];const __1=_Y1[0];const _02=_Y1[1];for(let c=0;c<input.length;++c){const _o1=input[c];const _12=__1[c];const _22=_02[c];for(let _p1=0;_p1<_o1.length;++_p1){_12[_p1]=_o1[_p1];_22[_p1]=_o1[_p1];}}return this._j1;}}class _32 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._i1();
}process(_X1,_Y1,_Z1){const _s1=_X1[0];const _t1=_X1[1];const output=_Y1[0];const bypass=_Z1.bypass;for(let c=0;c<_t1.length;++c){const _42=_s1[c];const _52=_t1[c];const _u1=output[c];for(let _p1=0;_p1<_42.length;++_p1){const _q1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];if(_q1>0){_u1[_p1]=_52[_p1];}else {_u1[_p1]=_42[_p1];}}}return this._j1;}}registerProcessor("eq-input",_W1);registerProcessor("eq-output",_32);class _62 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",
automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._i1();}process(_m1,_n1,parameters){const input=_m1[0];const output=_n1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _o1=input[c];const _u1=output[c];for(let _p1=0;_p1<_o1.length;++_p1){_u1[_p1]=_o1[_p1];const _q1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];if(_q1>0.0){continue;}const _v1=(gain[_p1]!==undefined)?gain[_p1]:gain[0];
_u1[_p1]*=_v1;}}return this._j1;}}registerProcessor("gain-processor",_62);class _72 extends AudioWorkletProcessor{static get parameterDescriptors(){const _82=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_82),minValue:10.0,maxValue:_82},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,
minValue:1e-6}];}constructor(_y1){super();this._i1();const _z1=_y1.outputChannelCount[0];this._92=0;this._a2=0;this._b2=0;this._c2=0;this._d2=0;this._e2=new Float32Array(_z1);this._f2=new Float32Array(_z1);this._g2=new Float32Array(_z1);this._h2=new Float32Array(_z1);this._i2=-1;this._j2=-1;this._k2=-1;}process(_m1,_n1,parameters){const input=_m1[0];const output=_n1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _l2=(freq.length===1&&q.length===1&&gain.length===1);
if(_l2)this._m2(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _o1=input[c];const _u1=output[c];for(let _p1=0;_p1<_o1.length;++_p1){if(_l2===false){const _C1=(freq[_p1]!==undefined)?freq[_p1]:freq[0];const _n2=(q[_p1]!==undefined)?q[_p1]:q[0];const _v1=(gain[_p1]!==undefined)?gain[_p1]:gain[0];this._m2(_C1,_n2,_v1);}const _o2=this._b2*_o1[_p1]+this._c2*this._e2[c]+this._d2*this._f2[c]-this._92*this._g2[c]-this._a2*this._h2[c];this._f2[c]=this._e2[c];this._e2[c]=_o1[_p1];this._h2[c]=this._g2[c];
this._g2[c]=_o2;const _q1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];_u1[_p1]=(_q1>0)?_o1[_p1]:_o2;}}return this._j1;}_m2(_p2,_q2,_r2){if(_p2===this._i2&&_q2===this._j2&&_r2===this._k2)return;const _s2=2*Math.PI*_p2/sampleRate;const _t2=Math.cos(_s2);const _u2=Math.sqrt(_r2);const _v2=_u2+1;const _w2=_u2-1;const _x2=_v2*_t2;const _y2=_w2*_t2;const _z2=_v2-_y2;const _A2=_v2+_y2;const alpha=Math.sin(_s2)/(2*_q2);const _B2=(2*Math.sqrt(_u2)*alpha);const _C2=_z2+_B2;const _92=2*(_w2-_x2);const _a2=_z2-_B2;const _b2=_u2*(_A2+_B2);
const _c2=-2*_u2*(_w2+_x2);const _d2=_u2*(_A2-_B2);this._92=_92/_C2;this._a2=_a2/_C2;this._b2=_b2/_C2;this._c2=_c2/_C2;this._d2=_d2/_C2;this._i2=_p2;this._j2=_q2;this._k2=_r2;}}registerProcessor("hi-shelf-processor",_72);class _D2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _E2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_E2),minValue:10.0,
maxValue:_E2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_y1){super();this._i1();const _z1=_y1.outputChannelCount[0];this._92=0;this._a2=0;this._b2=0;this._c2=0;this._d2=0;this._e2=new Float32Array(_z1);this._f2=new Float32Array(_z1);this._g2=new Float32Array(_z1);this._h2=new Float32Array(_z1);this._F2=-1;this._j2=-1;}process(_m1,_n1,parameters){const input=_m1[0];const output=_n1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;
const _l2=(cutoff.length===1&&q.length===1);if(_l2)this._m2(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _o1=input[c];const _u1=output[c];for(let _p1=0;_p1<_o1.length;++_p1){if(_l2===false){const c=(cutoff[_p1]!==undefined)?cutoff[_p1]:cutoff[0];const _n2=(q[_p1]!==undefined)?q[_p1]:q[0];this._m2(c,_n2);}const _o2=this._b2*_o1[_p1]+this._c2*this._e2[c]+this._d2*this._f2[c]-this._92*this._g2[c]-this._a2*this._h2[c];this._f2[c]=this._e2[c];this._e2[c]=_o1[_p1];this._h2[c]=this._g2[c];this._g2[c]=_o2;
const _q1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];_u1[_p1]=(_q1>0)?_o1[_p1]:_o2;}}return this._j1;}_m2(_G2,_q2){if(_G2===this._F2&&_q2===this._j2)return;const _s2=2*Math.PI*_G2/sampleRate;const alpha=Math.sin(_s2)/(2*_q2);const _t2=Math.cos(_s2);const _C2=1+alpha;const _92=-2*_t2;const _a2=1-alpha;const _b2=(1+_t2)/2;const _c2=-1-_t2;const _d2=(1+_t2)/2;this._92=_92/_C2;this._a2=_a2/_C2;this._b2=_b2/_C2;this._c2=_c2/_C2;this._d2=_d2/_C2;this._F2=_G2;this._j2=_q2;}}registerProcessor("hpf2-processor",
_D2);class _H2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _82=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_82),minValue:10.0,maxValue:_82},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_y1){super();this._i1();const _z1=_y1.outputChannelCount[0];
this._92=0;this._a2=0;this._b2=0;this._c2=0;this._d2=0;this._e2=new Float32Array(_z1);this._f2=new Float32Array(_z1);this._g2=new Float32Array(_z1);this._h2=new Float32Array(_z1);this._i2=-1;this._j2=-1;this._k2=-1;}process(_m1,_n1,parameters){const input=_m1[0];const output=_n1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _l2=(freq.length===1&&q.length===1&&gain.length===1);if(_l2)this._m2(freq[0],q[0],gain[0]);for(let c=0;c<input.length;
++c){const _o1=input[c];const _u1=output[c];for(let _p1=0;_p1<_o1.length;++_p1){if(_l2===false){const _C1=(freq[_p1]!==undefined)?freq[_p1]:freq[0];const _n2=(q[_p1]!==undefined)?q[_p1]:q[0];const _v1=(gain[_p1]!==undefined)?gain[_p1]:gain[0];this._m2(_C1,_n2,_v1);}const _o2=this._b2*_o1[_p1]+this._c2*this._e2[c]+this._d2*this._f2[c]-this._92*this._g2[c]-this._a2*this._h2[c];this._f2[c]=this._e2[c];this._e2[c]=_o1[_p1];this._h2[c]=this._g2[c];this._g2[c]=_o2;const _q1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];
_u1[_p1]=(_q1>0)?_o1[_p1]:_o2;}}return this._j1;}_m2(_p2,_q2,_r2){if(_p2===this._i2&&_q2===this._j2&&_r2===this._k2)return;const _s2=2*Math.PI*_p2/sampleRate;const _t2=Math.cos(_s2);const _u2=Math.sqrt(_r2);const _v2=_u2+1;const _w2=_u2-1;const _x2=_v2*_t2;const _y2=_w2*_t2;const _z2=_v2-_y2;const _A2=_v2+_y2;const alpha=Math.sin(_s2)/(2*_q2);const _B2=(2*Math.sqrt(_u2)*alpha);const _C2=_A2+_B2;const _92=-2*(_w2+_x2);const _a2=_A2-_B2;const _b2=_u2*(_z2+_B2);const _c2=2*_u2*(_w2-_x2);const _d2=_u2*(_z2-_B2);this._92=_92/_C2;
this._a2=_a2/_C2;this._b2=_b2/_C2;this._c2=_c2/_C2;this._d2=_d2/_C2;this._i2=_p2;this._j2=_q2;this._k2=_r2;}}registerProcessor("lo-shelf-processor",_H2);class _I2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _E2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_E2),minValue:10.0,maxValue:_E2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,
maxValue:100.0}];}constructor(_y1){super();this._i1();const _z1=_y1.outputChannelCount[0];this._92=0;this._a2=0;this._b2=0;this._c2=0;this._d2=0;this._e2=new Float32Array(_z1);this._f2=new Float32Array(_z1);this._g2=new Float32Array(_z1);this._h2=new Float32Array(_z1);this._F2=-1;this._j2=-1;}process(_m1,_n1,parameters){const input=_m1[0];const output=_n1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _l2=(cutoff.length===1&&q.length===1);if(_l2)this._m2(cutoff[0],
q[0]);for(let c=0;c<input.length;++c){const _o1=input[c];const _u1=output[c];for(let _p1=0;_p1<_o1.length;++_p1){if(_l2===false){const c=(cutoff[_p1]!==undefined)?cutoff[_p1]:cutoff[0];const _n2=(q[_p1]!==undefined)?q[_p1]:q[0];this._m2(c,_n2);}const _o2=this._b2*_o1[_p1]+this._c2*this._e2[c]+this._d2*this._f2[c]-this._92*this._g2[c]-this._a2*this._h2[c];this._f2[c]=this._e2[c];this._e2[c]=_o1[_p1];this._h2[c]=this._g2[c];this._g2[c]=_o2;const _q1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];_u1[_p1]=(_q1>0)?_o1[_p1]:_o2;
}}return this._j1;}_m2(_G2,_q2){if(_G2===this._F2&&_q2===this._j2)return;const _s2=2*Math.PI*_G2/sampleRate;const alpha=Math.sin(_s2)/(2*_q2);const _t2=Math.cos(_s2);const _C2=1+alpha;const _92=-2*_t2;const _a2=1-alpha;const _b2=(1-_t2)/2;const _c2=1-_t2;const _d2=(1-_t2)/2;this._92=_92/_C2;this._a2=_a2/_C2;this._b2=_b2/_C2;this._c2=_c2/_C2;this._d2=_d2/_C2;this._F2=_G2;this._j2=_q2;}}registerProcessor("lpf2-processor",_I2);class _J2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _82=Math.min(sampleRate/2.0,
20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_82),minValue:10.0,maxValue:_82},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_y1){super();this._i1();const _z1=_y1.outputChannelCount[0];this._92=0;this._a2=0;this._b2=0;this._c2=0;this._d2=0;this._e2=new Float32Array(_z1);
this._f2=new Float32Array(_z1);this._g2=new Float32Array(_z1);this._h2=new Float32Array(_z1);this._i2=-1;this._j2=-1;this._k2=-1;}process(_m1,_n1,parameters){const input=_m1[0];const output=_n1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _l2=(freq.length===1&&q.length===1&&gain.length===1);if(_l2)this._m2(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _o1=input[c];const _u1=output[c];for(let _p1=0;_p1<_o1.length;++_p1){if(_l2===false){
const _C1=(freq[_p1]!==undefined)?freq[_p1]:freq[0];const _n2=(q[_p1]!==undefined)?q[_p1]:q[0];const _v1=(gain[_p1]!==undefined)?gain[_p1]:gain[0];this._m2(_C1,_n2,_v1);}const _o2=this._b2*_o1[_p1]+this._c2*this._e2[c]+this._d2*this._f2[c]-this._92*this._g2[c]-this._a2*this._h2[c];this._f2[c]=this._e2[c];this._e2[c]=_o1[_p1];this._h2[c]=this._g2[c];this._g2[c]=_o2;const _q1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];_u1[_p1]=(_q1>0)?_o1[_p1]:_o2;}}return this._j1;}_m2(_p2,_q2,_r2){if(_p2===this._i2&&_q2===this._j2&&_r2===this._k2)return;
const _s2=2*Math.PI*_p2/sampleRate;const _t2=Math.cos(_s2);const _u2=Math.sqrt(_r2);const alpha=Math.sin(_s2)/(2*_q2);const _K2=alpha/_u2;const _L2=alpha*_u2;const _C2=1+_K2;const _92=-2*_t2;const _a2=1-_K2;const _b2=1+_L2;const _c2=_92;const _d2=1-_L2;this._92=_92/_C2;this._a2=_a2/_C2;this._b2=_b2/_C2;this._c2=_c2/_C2;this._d2=_d2/_C2;this._i2=_p2;this._j2=_q2;this._k2=_r2;}}registerProcessor("peak-eq-processor",_J2);class _M2{constructor(_N2){this._O2=0;this._P2=0;this.feedback=0;this._Q2=0;this.buffer=new Float32Array(_N2);
this._R2=0;}process(_V1){const out=this.buffer[this._R2];this._Q2=(this._Q2*this._O2)+(out*this._P2);this.buffer[this._R2]=_V1+(this._Q2*this.feedback);++this._R2;this._R2%=this.buffer.length;return out;}_S2(_T2){this.feedback=Math.min(Math.max(0,_T2),1);}_U2(_V2){this._O2=Math.min(Math.max(0,_V2),1);this._P2=1-this._O2;}}class _W2{constructor(_N2){this.feedback=0;this.buffer=new Float32Array(_N2);this._R2=0;}process(_V1){const out=this.buffer[this._R2];this.buffer[this._R2]=_V1+(out*this.feedback);++this._R2;
this._R2%=this.buffer.length;return(out-_V1);}_S2(_T2){this.feedback=Math.min(Math.max(0,_T2),1);}}class _X2 extends AudioWorkletProcessor{static _Y2=8;static _Z2=4;static __2=0.015;static _03=0.4;static _13=0.28;static _23=0.7;static _33=[1116,1188,1277,1356,1422,1491,1557,1617];static _43=[1139,1211,1300,1379,1445,1514,1580,1640];static _53=[556,441,341,225];static _63=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",
automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_y1){super();this._i1();const _z1=_y1.outputChannelCount[0];this._73=-1;this._83=-1;this._93=new Array(_z1);this._a3=new Array(_z1);const _b3=[_X2._33,_X2._43];const _c3=[_X2._53,_X2._63];for(let c=0;c<_z1;++c){this._93[c]=new Array(_X2._Y2);this._a3[c]=new Array(_X2._Z2);
for(let i=0;i<_X2._Y2;++i)this._93[c][i]=new _M2(_b3[c%_b3.length][i]);for(let i=0;i<_X2._Z2;++i)this._a3[c][i]=new _W2(_c3[c%_c3.length][i]);}this._d3(0.5);this._U2(0.5);for(let c=0;c<_z1;++c)for(let i=0;i<_X2._Z2;++i)this._a3[c][i]._S2(0.5);}process(_m1,_n1,parameters){const input=_m1[0];const output=_n1[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _o1=input[c];const _u1=output[c];for(let _p1=0;_p1<_o1.length;
++_p1){const _p1=(size[_p1]!==undefined)?size[_p1]:size[0];const _e3=(damp[_p1]!==undefined)?damp[_p1]:damp[0];this._d3(_p1);this._U2(_e3);_u1[_p1]=_o1[_p1];let out=0;const _D1=_o1[_p1]*_X2.__2;for(let i=0;i<_X2._Y2;++i)out+=this._93[c][i].process(_D1);for(let i=0;i<_X2._Z2;++i)out=this._a3[c][i].process(out);const _q1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];if(_q1>0.0){continue;}const _F1=(mix[_p1]!==undefined)?mix[_p1]:mix[0];_u1[_p1]*=(1-_F1);_u1[_p1]+=(out*_F1);}}return this._j1;}_d3(_N2){if(_N2===this._73)return;
const size=(_N2*_X2._13)+_X2._23;for(let c=0;c<this._93.length;++c)for(let i=0;i<_X2._Y2;++i)this._93[c][i]._S2(size);this._73=_N2;}_U2(_V2){if(_V2===this._83)return;const damp=_V2*_X2._03;for(let c=0;c<this._93.length;++c)for(let i=0;i<_X2._Y2;++i)this._93[c][i]._U2(damp);this._83=_V2;}}registerProcessor("reverb1-processor",_X2);class _f3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",
defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_y1){super();this._i1();const _z1=_y1.outputChannelCount[0];this._g3=new Array(_z1).fill(1.0);this._h3=new Array(_z1).fill(0.0);this._i3=new Array(_z1).fill(_j3._k3._l3);this._m3=new Array(_z1);for(let c=0;
c<_z1;++c){this._m3[c]=new _n3();this._m3[c]._o3(sampleRate);this._m3[c]._p3(this._g3[c]);this._m3[c]._q3(this._i3[c]);if(c%2===1){this._m3[c]._r3(this._h3[c]);}}}process(_m1,_n1,parameters){const input=_m1[0];const output=_n1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _o1=input[c];const _u1=output[c];for(let _p1=0;_p1<_o1.length;++_p1){_u1[_p1]=_o1[_p1];const _E1=(rate[_p1]!==undefined)?rate[_p1]:rate[0];
const _s3=(offset[_p1]!==undefined)?offset[_p1]:offset[0];const _t3=(shape[_p1]!==undefined)?shape[_p1]:shape[0];this._u3(c,_E1,_s3,_t3);const _v3=this._m3[c]._M1();const _q1=(bypass[_p1]!==undefined)?bypass[_p1]:bypass[0];if(_q1>0.0){continue;}const i=(intensity[_p1]!==undefined)?intensity[_p1]:intensity[0];const out=_o1[_p1]*_v3*i;_u1[_p1]*=(1.0-i);_u1[_p1]+=out;}}return this._j1;}_u3(_O1,_w3,_x3,_y3){if(_w3!==this._g3[_O1]){this._m3[_O1]._p3(_w3);this._g3[_O1]=_w3;}if(_x3!==this._h3[_O1]){if(_O1%2===1){
this._m3[_O1]._r3(_x3);}this._h3[_O1]=_x3;}if(_y3!==this._i3[_O1]){this._m3[_O1]._q3(_y3);this._i3[_O1]=_y3;}}}registerProcessor("tremolo-processor",_f3);function _j3(){}_j3._k3={_l3:0,_z3:1,_A3:2,_B3:3,_C3:4,_D3:5};_j3._E3=function(_F3){return 1.0-_F3;};_j3._G3=function(_F3){return _F3;};_j3._H3=function(_F3){return 0.5*(Math.sin((_F3*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_j3._I3=function(_F3){if(_F3<0.5){return 0.0;}return 1.0;};_j3._J3=function(_F3){if(_F3<0.5){return 2.0*_F3;}return 2.0-(2.0*_F3);};_j3._K3=[_j3._E3,
_j3._G3,_j3._H3,_j3._I3,_j3._J3];_L3._M3=512;_L3._N3=1.0/_L3._M3;function _L3(_O3){this.data=new Float32Array(_L3._M3);for(let i=0;i<_L3._M3;++i){this.data[i]=_O3(i*_L3._N3);}}_L3.prototype._M1=function(_F3){_F3=Math.max(0.0,_F3);_F3=Math.min(_F3,1.0);const _P3=_F3*_L3._M3;const _Q3=~~_P3;const _R3=_P3-_Q3;let _R1=_Q3;let _S1=_R1+1;if(_R1>=_L3._M3){_R1-=_L3._M3;}if(_S1>=_L3._M3){_S1-=_L3._M3;}const _T1=this.data[_R1];const _U1=this.data[_S1];return _T1+(_U1-_T1)*_R3;};_n3._S3=[];_n3._T3=false;_n3._U3=0.0;_n3._82=20.0;
function _n3(){this._V3=48000;this.shape=_j3._k3._A3;this.freq=1.0;this._W3=0.0;this._N3=0.0;this._X3=0.0;if(_n3._T3==true){return;}for(let i=0;i<_j3._k3._D3;++i){_n3._S3[i]=new _L3(_j3._K3[i]);}_n3._T3=true;}_n3._Y3=function(){return(_n3._T3==true);};_n3.prototype._o3=function(_Z3){this._V3=_Z3;this.__3();};_n3.prototype._p3=function(_p2){_p2=Math.max(_n3._U3,_p2);_p2=Math.min(_p2,_n3._82);this.freq=_p2;this.__3();};_n3.prototype._r3=function(_x3){_x3=Math.max(0.0,_x3);_x3=Math.min(_x3,1.0);const _04=_x3-this._X3;
this._X3=_x3;this._W3+=_04;while(this._W3>=1.0){this._W3-=1.0;}while(this._W3<0.0){this._W3+=1.0;}};_n3.prototype._q3=function(_y3){_y3=Math.max(0,_y3);_y3=Math.min(_y3,_j3._k3._D3-1);this.shape=_y3;};_n3.prototype._M1=function(){const result=_n3._S3[this.shape]._M1(this._W3);this._W3+=this._N3;while(this._W3>=1.0){this._W3-=1.0;}return result;};_n3.prototype.__3=function(){this._N3=this.freq/this._V3;};